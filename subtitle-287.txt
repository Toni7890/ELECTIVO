Acabamos de echar un vistazo al protocolo de transporte, que es la capa más baja de la pila TCP/IP. Escribimos un programa de Python y en ese programa de Python hicimos una conexión con el socket y luego nos conectamos a un puerto en particular en un ordenador lejano, y ahora vamos a empezar a enviar datos de un lado a otro. Hicimos la conexión. Esto nos mueve de la capa de transporte a la capa de aplicación. La capa de aplicación significa que hay algo diferente cuando se habla con un servidor de correo que cuando se habla con un servidor web. Hay reglas que describen cómo hablamos con ellos. Están las reglas de circulación. En una llamada telefónica, al menos en las culturas occidentales, cuando levantas el teléfono y suena, dices hola. Se supone que la persona que contesta el teléfono debe saludar primero. Puede que no te des cuenta de esto, pero es lo que es. La persona que contesta el teléfono saluda, y luego la segunda persona saluda y, con suerte, empiezas a hablar. A veces, si las cosas no funcionan bien, no lo escuchas. Estás como: ¿estás ahí? O se vuelve confuso si los teléfonos, o especialmente los teléfonos celulares, no son confiables. Esto es lo que decimos al llamar a los teléfonos para iniciar nuestra conversación es como el protocolo de la aplicación. El protocolo con el que vamos a jugar en este segmento es lo que se denomina protocolo de transporte de hipertexto o protocolo de transferencia de hipertexto. Es la capa de aplicación dominante en Internet y realmente se inventó para recuperar páginas web. En el momento de su creación, no se pensaba que fuera el mejor protocolo de la historia, pero se ha convertido en un protocolo increíble. Lo que pasó fue que era tan simple que podíamos superponerlo con nuevas ideas, así que empezamos con este protocolo de aplicación simple y muy básico y listo. Es un conjunto de reglas que permiten a los navegadores recuperar documentos de la web. Si quisieras escribir un navegador, podrías hacerlo, solo tendrías que ir a leer las especificaciones de lo que te van a enviar los servidores. O si va a escribir un servidor y quiere hablar con los navegadores, también debe leer esa especificación para HTTP. Una vez más, se trata solo de un conjunto de reglas para saber lo que vamos a hacer primero, saber cuál es la sintaxis que esperamos producir y consumir y hacer que los diferentes proveedores puedan trabajar juntos, y es solo una forma de estándares. Una de las cosas que HTTP estandarizó, que fue realmente genial, fue este protocolo de localizadores de recursos o URL uniformes. Los escribimos tanto que pensamos en ellos como si hubieras escrito esto para tener esto en tu navegador. Pero en realidad contienen en su interior cierta información. Http://dice usar el protocolo HTTP, www.dr-chuck.com dice que vaya a este host y, a continuación , la página /page1.htm dice que vaya a buscar este documento. Hace muchos años, en los años 90, tenías que saber todas estas cosas por separado. Pero luego los concatenamos todos y eso se convirtió en el localizador uniforme de recursos. O bien, escribe esta URL en tu navegador. Cada vez que el usuario hace clic en algo y quiere obtener un documento diferente, tienes un documento con algunos enlaces. El HTML tiene esta cosa llamada valor href. Haces clic en él y luego le dices a tu navegador que me muestre una página diferente haciendo clic en ella. Esa es la parte del hipertexto, es que en cualquier documento hay enlaces que van a otros documentos y estos enlaces son la magia de la web. Antes había formas de acceder a los datos desde los servidores, pero la idea de que el documento que tienes tiene enlaces a otros documentos es una idea poderosa. Ahora lo damos por sentado. Pero cuando salió por primera vez a mediados de los 90, 93, 94, 95. Es como si esto fuera mejor que las cosas que hemos estado haciendo. De lo contrario, aprenderíamos estos comandos extraños e íbamos a hacer estas cosas. Envía lo que se denomina una solicitud de obtención para obtener el documento y, a continuación, lo recupera y, a continuación, lo analiza y, a continuación, se lo muestra. Este es un pequeño diagrama de cómo funciona. Estás sentado ahí, estás mirando una página web y haces clic en un enlace. He hecho que sea el enlace azul para que hagas clic en él y diga segunda página. El navegador es un software que se ejecuta en su computadora e intercepta ese clic y dice que ha hecho clic en algo. Examina lo que hay en el HTML de la página de la que proviene para decir a qué servidor web conectarse, a qué puerto conectarse en ese servidor web y, a continuación, qué documento recuperar. Luego, su navegador establece una conexión de socket al puerto 80 y envía una solicitud llamada solicitud get, y envía esa solicitud get al puerto 80. Luego entra en ese servidor web y el servidor web analiza esa solicitud y descubre qué documento está buscando. Puede que ejecute un poco de software, pero cuando todo está dicho y hecho, produce en ese mismo socket una respuesta. Devuelve esa respuesta y esa respuesta está en forma de HTML, el lenguaje de marcado de hipertexto, que en realidad consiste en etiquetas dentro de pares menores que y mayores que. Ese h1 dice que es un 1 tierno, p dice que es el principio de un párrafo y, luego, la etiqueta a dice que se trata de un ancla, por lo que se supone que es texto en el que se puede hacer clic en la página siguiente. Luego vuelve y su navegador lo lee y luego hace que aparezca la página. Lee el HTML, lo analiza y hay un montón de reglas sobre dónde añadir líneas en blanco y todas esas otras cosas, para que tenga el aspecto que quieras. Esto se denomina ciclo de respuesta a la solicitud y tiene que ver con que cuando haces clic, va al servidor, recupera los datos y luego te los muestra. Básicamente, ves Click New Page, pero suceden muchas cosas entre bastidores cuando eso sucede. Todas las reglas sobre qué se envió exactamente, cómo se envió y cómo se juntan esas cadenas es que hay un estándar para ello, y hay toda una serie de estándares y, afortunadamente, son gratuitos y abiertos y están disponibles para que los leas y, aunque son largos y complejos, puedes consultarlos. Hace muchos años se formó un grupo para empezar a construir estos estándares. Numeran cada una de estas RFC. Se llaman solicitudes de comentarios. Es una sugerencia un poco irónica de que, aunque hay una RFC que guía el funcionamiento del navegador, millones y miles de millones de navegadores funcionan con cientos de miles o millones de servidores y sus ideas bastante sólidas de que siempre hay margen de mejora. Siempre puede haber margen de mejora. Lo que significa la solicitud de comentarios es que, por muy perfectos que creamos que tenemos estos estándares de ingeniería para Internet, siempre se pueden mejorar. Si te tomaste el tiempo suficiente y leíste lo suficiente, encontrarás este llamado RC 2616, que te dice algo sobre el protocolo HTTP. Estás escribiendo un navegador, vas a leer el protocolo HTTP, tienes cientos de páginas que leer. Te llevará un tiempo. Probablemente simplemente descargue un navegador gratuito y luego cree el suyo propio. Pero imaginemos hipotéticamente que vas a hacer esto. Leerás esto y estarás hojeando y hojeando, y llegas a esta sección y piensas: oh, esto es lo que incluye la sintaxis de una solicitud del cliente al servidor, con una primera línea de ese mensaje, el método que se aplicará al recurso, el identificador del recurso y la versión del protocolo en uso. Luego miramos y vemos, oh, aquí hay una muestra de una de esas cosas. GET, G-E-T, letras mayúsculas con un espacio y, a continuación, una URL, un localizador uniforme de recursos y, por último, un protocolo. Nos conectamos y luego esta es la línea que enviamos, es la solicitud de un documento. Resulta que si tienes el programa Telnet y la gente de Macintosh tiene este y la gente de Linux tiene esto, y la gente de Windows puede instalarlo. Descubra cómo hacer que Telnet funcione en Windows. Lo que le das a Telnet, Telnet es, es como un software prehistórico. La razón por la que no lo tienen en Windows es porque piensan que probablemente sea un agujero de seguridad, y puede que tengan razón, pero se lo quitaron. Es algo prehistórico, porque es una forma de conectarse a cualquier puerto de cualquier servidor de forma insegura y enviarle cosas. Lo que escribiría en su computadora es Telnet y, a continuación, el host y, a continuación, el puerto. Al elegir este puerto, digo que quiero conectarme al servidor web. Se conecta. Ahora, algunos servidores web están impacientes porque esperan hablar con los navegadores. Si tardas demasiado en escribir esto , dirá que tardaste demasiado en escribir. Solo eres un humano, estás haciendo trampa. Pero si escribes esto lo suficientemente rápido, puede ser útil cortarlo y pegarlo. Escribes este comando HTML exacto, es decir, exactamente la sintaxis, y luego presionas «Enter» aquí. Pulsas solo un «Enter» ahí mismo. Entonces, lo que sucederá es que esas dos líneas son suficientes para convencer a ese servidor web de que le devuelva una página, y le devolverá dos fragmentos de información. Te devolverá los encabezados. Se trata de metadatos sobre el archivo que está a punto de obtener, incluido el tipo de archivo que es, y dicen: oh, esto es solo un archivo HTML de barra de texto y, a continuación, una línea en blanco se divide entre los encabezados y el contenido, y luego el contenido del archivo, y luego se cierra la conexión. El cierre de la conexión no es parte del texto, solo dice que se cerró. Entonces, esta es la página que se muestra con algunas cosas y algunos enlaces más, etc. Este es el ciclo de respuesta a la solicitud. Excepto que normalmente lo que ocurre es que se trata de un navegador que hace una conexión de socket y luego envía un Get, y luego recupera los encabezados y luego recupera el cuerpo, y luego crea una bonita página con ese cuerpo. Así es como la gente real piratea ordenadores reales, es decir, hacen conexiones y envían cosas a través de esas conexiones. Creo que hay una famosa escena en Matriz 2 en la que Trinity está hackeando la parte trasera de la red eléctrica. La mayoría de las películas de seguridad hasta ese momento postulaban que los encargados de la seguridad, cuando entraban, lo hacían con estas interfaces de usuario realmente geniales. Pero resulta que en el mundo real suelen tener interfaces de usuario pésimas, algo así como la línea de comandos que intento decirte que utilices en esta clase. La verdad es que es una escena interesante. Puedes ir a esta URL y echar un vistazo a esta escena. De hecho, está escrito utilizando un software real para descifrar la seguridad. Fue la primera vez de su tipo en crear en una película cómo la gente entra por la puerta trasera de los ordenadores y hace cosas. Es algo más o menos interesante. Estoy intentando enseñarte cómo convertirte en un experto en todas estas cosas. Y todas estas cosas astutas, inteligentes y altamente sofisticadas, a menudo tienen interfaces de usuario muy simples. Si vamos a hacer lo mismo, que es establecer una conexión a un puerto, enviar una solicitud de obtención y, a continuación, recuperar algunos datos. Luego podemos hacer esto en Python. Empezamos con esas tres primeras líneas. Importe un enchufe, conecte el enchufe. Este enchufe primero, cuando haces el enchufe, es como un orificio de puerto que te permite salir. Es como una puerta que sale de su ordenador, pero la puerta no está abierta y aún no está conectada a ella. Eso también es algo parecido a Matrix. Hay una puerta, pero ¿a qué está conectada la puerta? De repente me vienen a la mente un par de escenas de Matriz. Bueno, como sea, eso es lo que hace, abre la puerta, pero no hay nada conectado. Entonces, la conexión básicamente se extiende fuera de su computadora. Esto podría fallar si este servidor no existe. Así que busca el servidor, se conecta al puerto 80 y establece el socket. Cuando esta línea esté lista, lo que tenemos es un socket y está conectado a un servidor. Sabes que el servidor está ahí y sabes que hay software en el otro extremo; de lo contrario, la conexión fallará. Pero si la conexión funciona, estás hablando, pero no has enviado ningún dato. Ahora puedes llamar a métodos en el objeto socket ahora que se ha conectado, como enviar y recibir, para enviar datos a través de él o recibir datos de él. Ahora, parte del protocolo de la aplicación es: ¿qué se hace primero? ¿Envías para recibir? Ahora, resulta que con HTTP, el servidor recibe primero y tú envías primero. Esas son las reglas. Lo primero que debes hacer es crear una solicitud, y esto es solo una cadena. Ahora tenemos que prepararlo para su envío. Hablaré en la siguiente sección sobre cómo funciona esta codificación. Prepáralo para enviarlo y, a continuación, lo enviamos y verás que hay dos líneas nuevas al final. Enter enter era lo que hacías cuando estabas en Telnet y era el get bla, bla, enter enter. Luego tenemos que prepararlo y lo enviamos. Esto significa que enviaste algo a este servidor y el servidor lo recibe. Va y lee algunos archivos y hace algunas cosas, y luego comenzará a enviar datos de vuelta. Ahora puedes usar un lazo de alambre. Receive es un método del objeto socket. Una vez que lo hayas enviado. Es posible que se necesiten un par de envíos para obtener todos los datos. Vamos a imprimir estas cosas en nuestra pantalla. Vamos a recibir hasta 512 caracteres. Si no obtenemos datos, eso significa el fin del archivo o el final de la transmisión, por lo que nos separamos. Luego, si obtenemos datos, los decodificamos. Hablaremos de eso en un segundo. Se trata de tomar datos del mundo exterior e interpretar lo que significan internamente para nosotros. Vamos a decodificarlo. Este bucle se ejecutará un montón de veces hasta que llegue al final del archivo y, a continuación, cerraremos el socket , lo que destruirá todo esto porque en realidad consume recursos en el ordenador y también en el ordenador lejano. Mysock.close cierra eso y listo. Básicamente es un ciclo de solicitud y respuesta en Python y solo es como qué, líneas 10 de código. Es realmente impresionante que Python sea capaz de hacer eso. Lo que obtendremos como resultado de esto es que obtendremos el mismo tipo de material que obtuvimos de Telnet. Va a ser un bucle que lea estas cosas, las decodifique y las imprima. Será encabezado, encabezado, sin importar el número de metadatos, esos serán los metadatos, luego una línea en blanco y luego el texto. Es exactamente lo mismo. Esos comandos de Python hacían lo mismo: establecer una conexión al puerto 80, enviar una solicitud de obtención, enviar una línea en blanco, esperar y leer los datos y, a continuación, imprimirlos en nuestra pantalla y eso es lo que veríamos. A continuación, quiero hablarles sobre esa parte de codificación y decodificación porque es bastante importante.