Ahora vamos a dejar de hablar de las interfaces de programas de aplicaciones , o API, en un contexto genérico, y vamos a ser realistas. Hay muchísimas API y hay organizaciones que las crean y venden el acceso a las API. Las API son un producto muy valioso. A menudo se necesita una cuenta para acceder a una API. Vamos a usar un código abierto, contenido abierto, base de datos abierta, callejero abierto. Y open street Map es como la versión gratuita y abierta de Google Maps que mantienen personas de todo el mundo. Es el concepto de apertura. Pero incluso en el caso de los datos de mapas de calles abiertos , aunque los datos son gratuitos, necesitas una cuenta para acceder a esta API en particular porque no queremos crear nuestra propia API. Podríamos tomar los datos y actualizarlos y ejecutar nuestro propio servidor. Es demasiado trabajo, pero puedes hablar con esta API en tus aplicaciones, pero hay un nivel de solicitudes gratuito, tienes que crear una cuenta y luego obtienes un nivel de solicitudes gratuito. Además , también puedes pagar por encima de esa tasa de uso. Pero para esta clase no vas a tener que gastar dinero. Y te mostraré cómo hice que ese truco sucediera al final. Se llama Geo API 5 y es una plataforma de ubicación, y si te fijas bien, solo se trata de geocodificar varias cosas. El ejemplo que vamos a hacer es tomar una dirección de texto como Ann Arbor , Michigan, y vamos a ver dónde está. Luego, eso se llama geocodificación, que consiste en buscar cosas. Es algo común de hacer. Lo hice cuando construí esta clase por primera vez. Tenía algunos datos, los ingresabas en un formulario de Google donde estaba tu ciudad y yo los ponía en un mapa. Era precioso. Quiero decir, es muy divertido poner cosas en un mapa, por eso se llama búsqueda de direcciones y se llama API de geocodificación. Hay una API de geocodificación inversa, en la que dices que aquí hay una ubicación, qué hay allí y hay un montón de cosas. Esta es una API, una API muy valiosa. Con la que vamos a jugar es con la API de geocodificación directa. Como he dicho, toma una dirección y la busca y encuentra en qué parte del mundo se encuentra. Lo más importante que sale son las coordenadas del GPS. Luego veremos más adelante, haremos un mapa, pondremos las cosas en un mapa, etc. Por ahora, solo vamos a hablar de esta API en Python. Básicamente, la idea aquí es que tengan un patio de recreo y puedes usarlo gratis y puedes usarlo tanto como quieras, básicamente, donde escribo una dirección y la busco y te muestra los datos y te muestra las demás cosas. Este es un patio de recreo y puedes simplemente jugar con esto. Es muy divertido. Ahora, este es el precio que básicamente te indica cuántos, y esto podría cambiar en el momento en que lo veas. Se cansan de los precios gratuitos y quieren cambiar los números o lo que sea. Pero en realidad no vamos a permitir que en esta clase hables directamente con esta API. Ni siquiera vas a tener que crear una cuenta, pero sí necesitas una clave de API y es muy fácil conseguirla. Todo lo que realmente quieren en este tema en particular, para esta clave de API, es que si solo la estás usando de forma gratuita, todavía quieren saber quién eres porque van a hacer un seguimiento de tu uso. Si no tienes una cuenta, no pueden rastrear tu uso y, por lo tanto, tienes una cuenta, están rastreando tu uso. Si haces algo más de 100 por día, te desconectarán. Es una forma de mantener gratis lo gratuito al tener una cuenta. De nuevo, no voy a pedirte que hagas esto. La razón es que he creado un sistema que lo hace específicamente para que no tengas que hablar con GeoApiFi. He creado un servidor proxy y verás en el código que se llama datos Pi3. Lo que he hecho es crear una cuenta en la API geográfica y codificar mi cuenta dentro del servidor Pi para obtener datos. Cuando haces una solicitud, hablas con mi servidor sin contraseña y yo hablo con la API geográfica con una contraseña. Ahora yo tengo un límite de velocidad, pero lo que he hecho es usar una cosa llamada Cloudflare, que es lo que se llama almacenamiento en caché perimetral. No importa en qué parte del mundo, si pides los mismos datos, una vez que los hayas solicitado, cuando Cloudflare guarde una copia de los mismos y guarde una copia en servidores repartidos por todo el mundo, tu código realmente se está comunicando con Cloudflare. Cuando Cloudflare pierde la memoria caché, habla con Pi para obtener datos. Pi for data tiene una amplia memoria caché. Y cuando los datos circulares pierden la memoria caché , pasan a la API geográfica. La conclusión es que hago que puedas hacer las cosas muy rápido sin tener en cuenta, y rara vez hablo con la API geográfica. La única vez que hablo con la API geográfica es cuando pides algo que no se ha pedido antes. Entonces, si lo haces, tengo mis propios límites de tarifas y, en algún momento, simplemente te desconectará, retrasará o te dirá que lo hagas. Una de las cosas que hace cuando pierdo la memoria caché en los datos libres de Pi es que lo hago muy lento, así que no te preocupes. La mayoría de las veces, cuando ejecutas tus aplicaciones, hablas y obtienes datos que ya están almacenados en caché en Cloudflare, que es gratis de forma infinita. Ancho de banda infinito gratis, lo cual es increíble. El punto es que, a veces, con las API, estoy haciendo un montón de obstáculos y escribí un montón de software solo para evitar que alcanzaras los límites de velocidad en los datos de la API geográfica. Simplemente puede escribir esta URL en el navegador o HTTP, probablemente HTTPS. Compra datos gratis, datos de Chuck Net. Esta Q es igual a, ese es un parámetro de consulta. Si escribe eso, obtendrá estos datos y estos datos le indicarán dónde está Ann Arbor. Es Json. Hemos hablado de Json, y el corsé rizado exterior es un objeto. Luego tenemos las características, que son una serie de características. Por lo general, la característica bajo cero es la que es interesante, por lo que si analizamos las características bajo cero y luego nos adentramos en el césped y L, O , N y LAT, vemos la longitud y la latitud de Ann Arbor, Michigan, y vemos otras cosas. Tal vez si escribiste mal Ann Arbor, Michigan, si tuviera AN con una E al final, podría decir, bueno, realmente te refieres a Ann Arbor, Michigan, y luego puedes ver que ese formato dice: oh, ese es el verdadero lugar al que vas en caso de que hayas cometido un error tipográfico. Te dice en qué condado se encuentra, en qué país se encuentra, etc. Son solo tú y un navegador. Ahora, tú y Python pueden hacer lo mismo que hemos estado hablando desde el principio con las solicitudes similares, por lo que tengo esta URL de servicio, que es la URL del servicio con un pequeño signo de interrogación que dice que es un parámetro de consulta y voy a preguntar por una ubicación, Ann Arbor, Michigan. Puedes ver que eso es lo que escribí, y es un bucle de cuatro, así que puedes escribir una y otra vez. Luego limpia los datos y crea el parámetro Q, Q es igual a la dirección. Luego se agrega la codificación de URL, ahí es donde ocurren los pequeños porcentajes. Obtienes estos porcentajes como el porcentaje 2C, es decir, la codificación de URL para una coma y un espacio. Esas son las reglas de las URL, la codificación de URL. Lo recupera y, a continuación, lee los datos con una decodificación. Si recuerdas, la lectura te da los datos sin procesar y la decodificación dice: Quiero decir que es UTF 8. Los datos internos son solo una cadena de Python. Tengo una declaración impresa que muestra la cantidad de datos que tenemos y los primeros 20 caracteres de dichos datos. Esto también se puede ver en el resultado. Luego hago un análisis de Json con Json, carga que los datos son solo una cadena, luego el Json es básicamente un diccionario en una lista. Esto se remonta a lo de la diapositiva anterior. Muestra todos esos datos entre corchetes y corchetes cuadrados. Luego, la siguiente línea, lat es igual a JS, presenta subpropiedades por debajo de cero sub lat. Básicamente, se trata de trabajar a través de un conjunto jerárquico de diccionarios y listas. Siempre que escribo un código como este, me lleva un poco de tiempo. Imprimiré JS y luego imprimiré JS de características, y luego imprimiré JS de características por debajo de cero. Entonces podría decir que podría añadir por error lat después de cero, y sería como que eso no está ahí. Estoy como, oh, espera, tengo que hacer propiedades en el subsuelo. Es un poco complicado hacerlo funcionar y, si tienes que hacerlo tú mismo, tienes que tener el Json en una pantalla y escribir Python una y otra vez. Y, finalmente, te das cuenta de que esa es la cadena mágica para extraer la latitud de este valor de retorno en particular de esta API en particular. También imprimo la ubicación a la que voy en ese campo formateado. Y de nuevo, escribir estas últimas cuatro líneas de código requiere un poco de esfuerzo, pero no es tan malo. En resumen, en todo este capítulo, hemos hablado de la arquitectura orientada a servicios. Cómo dividimos las aplicaciones en partes y las distribuimos en la red. La API es como un contrato. Tenemos servicios web de varias maneras. Tenemos XML y Soap and Rest, que es Rest en Json. Prácticamente la forma moderna de hacer las cosas. Soap y XML son una forma no moderna. Solo lo incluyo porque algún día tendrás que hablar con XML. Y podrías decir, ¿por qué no descansa? Como mencionamos antes, hay motivos para usar XML. Xml tiene ciertas ventajas y hemos hablado de dos formatos de serialización , XML y Json. Aplausos.