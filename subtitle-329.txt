[MÚSICA] Hola y bienvenidos a Python for Everybody. Estamos haciendo algunos tutoriales sobre el código. Si quieres seguir los pasos, tenemos un código zip de muestra que puedes descargar y ver todo el código. Y ya que estamos en el medio, estamos en el centro del código de clasificación de la página y acabamos de ejecutar la clasificación de la página. Hemos modificado el código, hemos revisado el ranking de páginas varias veces. El restablecimiento de SP nos permite reiniciar el algoritmo de clasificación si queremos, pero no vamos a jugar con eso. Vamos a jugar con SPDump y SPJson y hacer la visualización. Esa es la parte divertida. Así que voy a ir a spdump. Así que este es un código simple. porque en realidad solo se trata de ejecutar una consulta SQL y luego procesar cosas, ¿verdad? Así que se conecta a nuestra base de datos, crea un cursor y luego hace un recuento de selecciones y solo mostraremos el número de enlaces. Vamos a ordenar por el número de enlaces entrantes descendentes. Así que veremos los elementos más enlazados y veremos los cincuenta primeros. Así que es solo una muestra. Tenderás a escribir pequeños ayudantes como este que te faciliten la vida solo para mostrarte el tipo de cosas que quieres. Spdump.py. Como si solo fueras una especie de prueba, esto me parece correcto. Por lo tanto, aquí está el número de enlaces entrantes. Ese es mi blog que tiene la mayoría de los enlaces entrantes, seguido de mi blog sin categoría, sea lo que sea. Y este es el número de enlaces incautados en mi propio blog de alguna manera, no lo sé. Porque no se trata en absoluto de todo Internet. Así que, ahí vamos. Así que eso es SP Dump, bastante sencillo. Y ahora, vamos a pasar por el proceso de visualización. Así que esto analizará todos esos datos y generará un archivo JavaScript. Escribirá un archivo JavaScript, que luego se incorporará a mi visualización, usando D3. Y SPJSON va a hacer una unión muy, muy larga. Une los enlaces con la cosa, donde el HTML no es nulo o el error no es nulo. Ordenado por el número de enlaces entrantes. Por lo tanto, analizamos los elementos que tienen el mayor número de enlaces entrantes. Vamos a leer todo esto. Vamos a leer todas esas filas. Y extrae el ranking de páginas de cada una de ellas. Buscamos el rango más alto y el más bajo porque estos números pueden variar bastante. Van desde, ya sabes, 0.000 hasta 20 o 30. Y entonces, le preguntamos ¿cuántas quiere hacer? Así que solo aparece en la parte superior, como 20 o algo así, y verás por qué lo necesitamos en la visualización. Así que esto es solo una comprobación. Así que vamos a escribir un archivo, veremos cuál es su formato, es solo un archivo JavaScript y vamos a escribir, básicamente estamos normalizando el rango. Vamos a restar el rango mínimo y, como vamos a convertir esto en el grosor de la línea y, por lo tanto, dividimos por el, normalizamos el rango para que sea el grosor de la línea y el tamaño de la bola, verás todo esto en. En realidad, esto es simplemente escribir algo de JavaScript con cadenas pequeñas y cosas así. Y luego terminaremos el JavaScript y luego escribiremos todos los enlaces. Así que estas son las bolas que verás y esto muestra lo que es dibujar todas las líneas y esto normaliza nuevamente el grosor de las cosas. Y al imprimir estas cosas, ahora no quiero explicar esto con mucho detalle. Pero entonces usaré python spjson.py. Hagamos los 20 nodos principales. Y si echo un vistazo al archivo spider.js, verás que son algunos objetos los que básicamente ponen el ranking de la página, qué ID es, y esa es mi forma de crear un enlace de ida y vuelta. El peso es el tamaño del pequeño círculo y luego tenemos los eslabones. Y solo pedí el top 20, ¿verdad? Y luego este es el grosor de la línea, donde comienza la línea, donde termina, ¿de acuerdo? Así que esto es rojo. Por este archivo HTML. Y va a leer en alguna parte este archivo force JS y mi propio código spider.js. Esto es algo de JavaScript, quiero decir, el force.js es el código de visualización, y este es d3, la biblioteca de visualización. Así que estoy usando este d3.js, que es una biblioteca de visualización realmente genial. Y esto es simplemente dibujar los círculos y hacer que los círculos tengan colores, y hacer que los círculos sean más grandes y más pequeños. Y luego conectar todas las líneas intermedias, así que esto queda ahí. Estos datos alimentan esa cosa. Así que cuando terminemos, simplemente diga: «Abre». No tienes que hacer nada, abre force.html. Y todo esto, todo este hermoso material de JavaScript es como : «Vaya, qué guay, porque puedes mover estas cosas de un lado a otro». Puedes ver que los círculos son más grandes si pasas el ratón un rato sobre ellos y te muestra los círculos más grandes. Sabes que puedes ver estas cosas y es genial. Así que te di todos estos archivos force.js y force.html para que visualizaran el ranking de la página y pudieras usarlos para visualizar bastantes cosas. Tardarás un tiempo en obtener suficientes datos de un sitio web real, pero después de ver entre 400 y 500 páginas, si tienes tiempo, la visualización es bastante interesante. Pero puedes ver por qué tuvimos que abrir varios cientos de páginas solo para obtener tanta información sobre el ranking de páginas. Bien, eso te da una idea de cómo ejecutar el código de clasificación de páginas en Python para todo el mundo. Así que gracias por escuchar. [MÚSICA]