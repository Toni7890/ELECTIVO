[MÚSICA] Hola a todos, bienvenidos a Python for Everybody. Estamos haciendo algunos tutoriales sobre el código. Si quieres obtener el código fuente, puedes echar un vistazo al código de muestra, descargarlo y trabajar en él. Por eso, en lo que estamos trabajando ahora es en recuperar y visualizar los datos del correo electrónico. Es un poco irónico. Vamos a analizar ahora los datos de correo electrónico y analizaremos los datos de correo electrónico con los que empezamos. Es el mismo tipo de datos de correo electrónico de la lista de desarrolladores. Y por eso existe este servicio llamado gmane. Y gmane archiva la lista de desarrolladores y varias listas de correo electrónico. Y he hecho una copia de sus datos porque si todos los estudiantes de mi clase recibieran lo mismo, su servidor con su API los estropearía. Así que, para ser una buena persona, instalé un servidor mucho más potente con solo los datos de esta lista. Y se trata de un gigabyte de datos. Así que ten mucho cuidado si pagas por la red. [TOS] Así que el proceso básico por el que vamos a pasar es tener un proceso simple de reiniciar, centrado en los problemas de la red, en la extracción de datos para extraer el contenido. sqlite. Y allí habrá una base de datos. Y luego tendremos un proceso de limpieza. Esta base de datos va a crecer alrededor de un gigabyte. Y luego vamos a tener un proceso que consiste en procesar estos datos, lleva un tiempo. Y entonces va a leer este mapeo. Y te lo mostraré cuando se deba a que cosas como los nombres de las personas han cambiado a lo largo de todos estos años. Y hace una limpieza y crea una versión muy buena y altamente relacional de estos datos. Y luego visualizamos desde aquí. Así que podría llevarte varios días acabar con esto. Esto tardará unos minutos en ejecutarse. Y luego solo tardará unos segundos en ejecutarse. Por lo tanto, este es un proceso de varios pasos en el que, si estuvieras haciendo algo, como correr algo durante dos días, produjeras una visualización. Si hubiera explotado tres cuartas partes del proceso, no te serviría de nada. Y por eso lo dividimos en partes simples. Pero ahora mismo nos vamos a centrar en esta parte y a echar un vistazo a la parte del correo. La parte del correo a la hora de recuperar el correo y luego tendremos otro vídeo para hablar del resto de estas cosas, ¿de acuerdo? Así que echemos un vistazo al código. Así que aquí está gmain.py, que es el código básico. Y es de esperar que las cosas empiecen a resultarme familiares. Lo raro aquí es que vamos a hacer un análisis de fecha y hora y hay un código disponible, pero puede que tengas que instalarlo. Y tuve que escribir mi código de una manera que no asumiera que se podía instalar el analizador de fecha y hora. Y así lo tiene parejo. Si eso no está allí, usa mi propio analizador de fecha y hora. Y eso es lo que es este código, no te preocupes demasiado por eso. Y, por supuesto, tenemos que hacer frente a la falta de certificados en Python. Así que empezamos las cosas y esta es realmente una tabla sencilla. Tenemos una tabla de mensajes que tiene una clave principal. El correo electrónico en sí cuando se envió, el asunto, los encabezados y el cuerpo, está bien. Así que lo que vamos a hacer es porque tenemos que continuar donde lo dejamos. Vamos a seleccionar la clave principal más grande de la tabla de mensajes y recuperarla. Y luego vamos a ir a la siguiente, ¿vale? Y entonces sabemos cuál es la identificación y vamos a continuar donde lo dejamos. Así que tenemos un punto de partida, el inicio puede ser cero o uno. Y vamos a pedir que nos recuperen los mensajes más comunes. Tenemos algunos contadores, así que vamos a decir: bueno, veamos si seleccionamos el identificador de los mensajes, donde el identificador es igual a lo que mejor comienza, es el número más alto que hemos visto hasta ahora. Y si la fila no es ninguna, significa que ya hemos recuperado este mensaje de correo electrónico en particular; de lo contrario, seguiremos adelante. Y estamos en buena forma y este es el que queremos recuperar. Y lo estamos restando para saberlo, y esta es la URL base, esta es la URL de nuestra API. La única de la que tengo una buena copia de todos estos datos está en un servidor al que se puede acceder desde cualquier parte del mundo y que no se bloquea. Así que con el formato, como puedes decir, me gustaría la dirección de correo electrónico de uno, del uno al dos, o del 100, vaya, vaya, del mensaje 101 al 102, podemos ver estas cosas. Así que ese es el ID del mensaje, así que si vamos a crear la URL, cogeremos esta URL, añadiremos la dirección de inicio y, a continuación, añadiremos una más. Así que tenemos esta barra al final de la dirección de inicio y así es como las formamos. Y vamos a recuperarlo y lo vamos a decodificar. Lo hemos visto en otros, vamos a comprobar si tenemos datos legítimos. Si no, si recibo un 404 que no se encuentra u otra cosa, vamos a dejar de fumar. Si alguien pulsa Ctrl+C, que es nuestro Ctrl+Z, conseguimos que el programa interrumpa. Y pararemos si hay algún otro problema, ¿no? Vamos a quejarnos y seguir adelante. Y si tenemos cinco fracasos seguidos, vamos a dejar de fumar, pero seguiremos así porque estas cosas tienen algunos fallos aquí. En este punto, si hemos llegado hasta aquí, hemos recuperado la URL y tenemos el número de caracteres que hemos recuperado. Y si recibimos datos incorrectos, si no es porque se trata de un mensaje masculino, ¿verdad? Y todos comienzan con el espacio, si es correcto, comienzan desde el espacio, entonces, ¿qué va a tolerar? Los cinco errores que se producen allí por datos incorrectos, ya que podrían ser malos. Y voy a encontrar la línea en blanco porque la nueva línea al final de una línea y luego una línea en blanco. Y luego dividiremos esto en los encabezados, los encabezados de los correos. Estos son los encabezados de los correos electrónicos, hasta aquí, pero sin incluir la línea en blanco. Y el cuerpo lo es todo después de eso, ¿vale? Y entonces tendremos que partirlo en pedazos. Tus ojos se quejarán y tolerarán hasta cinco personajes. Y luego usaremos una expresión regular, parecida al capítulo de expresiones regulares, para extraer una dirección de correo electrónico de dos puntos en algún lugar de los encabezados a partir de los dos puntos que hay justo ahí. Va a buscar un valor menor que y, a continuación, vamos a sacar estas cosas. Así que tienes el menor que, tienes el paréntesis. Tienes uno o más caracteres que no están en blanco seguidos de un signo y, seguidos de uno o más caracteres que no están en blanco. Y obtendremos una lista de esos, solo deberíamos tener uno. Si encontramos uno, cogeremos el correo electrónico. Vamos a eliminar la minúscula. Y si nos dan un poco menos que firmar ahí, también lo toleraremos. Así que esto es una especie de limpieza, y te acostumbras a esto y piensas: ¿cómo es que todas esas direcciones de correo electrónico tienen estas otras cosas? Y también buscamos que haya nada menos que señales. Y lo hacemos de esta manera, es diferente, algunos mensajes de correo lo tienen así y, de nuevo, escribes este código después de mirarlo durante un rato. Y como si estuviera roto y te diera cosas malas. Y los pongo todos en minúscula para que coincidan mejor y eliminen a los malos personajes. Por qué ahora tengo una dirección de correo electrónico. Entonces, lo que hago es buscar la fecha de esto. Así que voy a graficarlos por fechas. Así que busco esta línea y uso una expresión regular para extraerla, ¿verdad? Así que estoy buscando una fecha, seguida de un espacio en blanco, seguido de cualquier número de caracteres, seguido de una coma. Así que no me interesa la parte del miércoles, así que me saltaré esa parte y me quedo con todo lo que quede después de esa coma. Así que está realmente aquí hasta el final de la línea. Así que esa es la nueva línea. Así que va hasta el final, va a sacar esta parte que está aquí, que es el texto. Y aquí es donde vamos a decir que es una cita un poco rara y queremos estandarizar esa fecha. Así que vamos a, veamos, vamos a reducirlo a 26 caracteres. Al parecer, no sé cuáles son los 26, por qué nos importa el personaje de 26, pero lo redujimos a 26 personajes. Y ahora vamos a analizarlo y eso nos va a dar una buena fecha limpia, la fecha de envío. Ahora vamos a terminar, vamos a dejarlo y, si no puedes analizarlo , vamos a tolerar cinco direcciones de correo electrónico incorrectas seguidas. Luego buscamos la línea de asunto usando otra expresión regular, la línea de asunto. Expresión regular que es bastante fácil de entender, pero no la incluye, ¿verdad? Hay un espacio en blanco ahí. Hay un tema. Luego lo sacamos y obtenemos el tema. Llegados a este punto, teníamos cosas buenas, así que reiniciamos la trampa. porque no dejaba de decir que si fallas cinco veces seguidas, renuncias. Vamos a imprimirlo y luego simplemente insertaremos esas cosas. Tenemos el identificador del mensaje y la dirección de correo electrónico que proviene del momento en que se envió al asunto. Y, básicamente, los encabezados están en el cuerpo y simplemente los estamos insertando. Y ahora vamos a decir que cada 50 vamos a confirmarlo para acelerar las cosas y cada cien tendremos que esperar un segundo. Así que ya sabes que el conteo va subiendo, subiendo, subiendo y cada 50 verás una pausa y, cada 100, se detendrá durante un segundo. Principalmente para poder presionar Ctrl+C o para no sobrecargar ningún servidor. Vale, esa es la más sencilla. El problema es que los datos simplemente se ponen feos. Y entonces te darás cuenta de que quieres restablecer esto y empezar de nuevo. Este va a funcionar, por supuesto. Pero es que son difíciles de construir y por eso es una buena idea, vaya, Python three gmain.py. ¿Cuántos mensajes? Bueno, hagamos solo uno. Bueno, pues fue y lo agarró, ¿ya lo tengo funcionando? Del 51 al 52, permítanme empezar de nuevo. S- 1 *sqlite. De acuerdo, ejecuta el contenido. Debo ejecutarlo para probarlo. Así que ejecutémoslo de nuevo en python3 gmane.py y pidamos un mensaje. Bien, ahí fuimos y recibimos el mensaje uno del uno al dos, obtuvimos 2662 caracteres. E imprimimos la dirección de correo electrónico cuando la recibimos después de todo ese hackeo y el asunto, y eso es lo que tenemos. Así que si echamos un vistazo a la base de datos y entramos en la página principal, cada vez que veas el contenido de SQLite journal significa que necesitábamos ejecutar un COMMIT. Y no ha ejecutado un COMMIT y tiene que ejecutar COMMIT, pero pulsaré ENTER y eso hará la confirmación y verás que desaparece. Así que ahora puedo abrirlo y echar un vistazo a. ¿Por qué no hay mensajes? ¿No lo guardaron ahí por alguna razón? Necesita refrescarse. Vamos a ejecutarlo de nuevo. Quizá no se comprometió. Quizá tengo un error. Hagamos que cambie el código. [SONIDO] Voy a, ver este connection.comitt, ver ese connection.commit. Voy a comprometerme allí y la otra cosa que voy a hacer es que cada vez que me detenga a leer quiero comprometerme justo antes de leerlo. Así que creo que deberíamos esperar que no explote. Ya veremos. Así que la idea es que si quiero parar quiero cometerlo. Así que hagámoslo. Hagamos un mensaje. Y ahora debo atacar si está comprometido. Ahora que he puesto los compromisos, creo que se verá mejor. [RUIDO] Bien, actualízalo y ahí está porque yo lo cometí. Y no tengo el archivo del diario, así que está bien, así que es una buena idea poner esas confirmaciones ahí, así que las dejaré ahí. Cuando lo descargues, tendrá estas confirmaciones allí. Así que de nuevo puse un compromiso aquí y otro al final para asegurarme. Así que me lo perdí. Pero ahora tenemos 1, ¿verdad? Vamos a ejecutarlo de nuevo, y verás cómo, al seleccionar el máximo del ID, se selecciona el máximo de este y, a continuación, se le añade 1, de modo que no sirve para el siguiente. Así que si lo ejecuto de nuevo, dicen que me des un mensaje para que quede de dos a tres. Y dame dos mensajes. Así que presiono enter y puedo actualizar y veo que tenemos cuatro mensajes. Así que vamos a encender a este bebé. Dile que consiga 100. Corre, corre, corre, corre. ¿Verdad? Va y viene y se detiene de vez en cuando para comprometerse y si hago un compromiso cada vez. Vaya, simplemente se detuvo ahí. Ahora, ha terminado. Así que esto se ejecutará y obtendremos un montón de datos. El problema es que si lo ejecuto, tardaré unas cinco horas, ¿de acuerdo? Para ejecutar esto y obtener todo esto. Y tengo una conexión muy rápida. Así que tengo un archivo que puedes descargar. Vamos a buscarlo. Vamos a ver si puedo. Veamos cuánto tiempo tardaré en descargar esto. Tengo un archivo que puedes descargar y guardar. Ahora voy a usar la línea de comandos: curl o wget es otro comando que podemos usar los usuarios de Linux y Mac. No sé, puede que tengas que usar tu navegador para hacerlo. Vamos a ver cuánto tiempo va a llevar esto. Se está recuperando, a la 1:30. Vale. Bueno, esperaré y volveré. [MÚSICA] Bien, ya está hecho. Tenía un promedio de diez megabits por segundo. Descargué unos 600 megabytes, diez megabits por segundo. Probablemente sea más lento para ti. Así que ahora, si echo un vistazo. Verás que content.sqlite es de 624 megabytes. Ahora, lo que pasa es que he descubierto esto de forma gratuita. Ahora, si ejecutas gmane.py y pides cinco mensajes más, continuará donde lo dejé. Así que depende de enviar 59.000 mensajes. Y creo que vimos un error. Vi un error en esa. No sé qué tiene de malo esa. Vamos a ver si, entonces, en este momento vamos a tener la mayoría de los datos. Puede que encuentre su camino hasta el final. Una vez que consigas esto, no debería ser mucho más. No lo sé. Quizá sean 63.000 o algo así. Así que lo que haremos es dejarlo pasar. Volveremos cuando termine, y pasaremos a la siguiente fase cuando tenga todos sus datos, ¿de acuerdo? Así que gracias por escuchar. [MÚSICA]