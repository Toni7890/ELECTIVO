Bienvenido a Loops and Iteration. Básicamente, aquí es donde las computadoras realizan tareas repetitivas que los humanos no queremos hacer. Aquí es donde se produce el verdadero poder y el beneficio real de las computadoras. Cada vez que pasamos por el circuito tenemos que hacer algo inteligente. Pero podemos decirle a un ordenador que lo haga un millón de veces con mucha, mucha facilidad. Así que la idea básica es que, en algún momento del código, vuelvas a funcionar, ¿no? La idea es que ya has hecho algo, volvamos a hacerlo. Y la forma en que lo expresamos en Python es con un par de palabras clave. Una de las palabras clave es la palabra clave while y la palabra clave for. Así que empezaremos a hablar sobre el tiempo. Y dentro de poco, hablaremos de bucles definidos usando for. Estos se denominan bucles indefinidos. Así que si bien es una palabra clave y esta es como una sentencia if, esta es una pregunta. ¿n es mayor que 0? Eso lleva a una respuesta verdadera o falsa. Y si es cierto, este código se ejecuta y si no es cierto, se omite el código. Y en ese sentido, es exactamente lo mismo que un «si». Se podría decir que si n es mayor que 0, ejecute este código; de lo contrario, omita este código. Pero ahí es donde las cosas se ponen un poco diferentes. Entonces, si es cierto en este caso, n es 5, entonces es cierto. Así que ejecuta esto. Imprime 5, lo que lo imprime y luego resta 1 de n, lo que lo convierte en 4. Pero con el enunciado while, vuelve a subir. Y vuelve a comprobar la pregunta. Esa es otra forma de decir esto es aquí, vuelve a comprobar la pregunta. Y mientras n mayor que 0 siga siendo cierto, se sumergirá y volverá a hacer esto. Así que se sumerge e imprime 4, y luego resta a 3 y sube. Vuelve a comprobar, vuelve a comprobar mientras esté ahí, vuelve a bajar, así que imprime 3 y luego resta hasta 2, y luego imprime 2 y resta hasta 1, y luego imprime 1 y resta hasta 0. Así que en este caso, n ahora mismo, es que imprimimos eso y ahora n es 0, y sale. n es 0, y sale. ¿n es mayor que 0? Bueno, ahora ha pasado de todas las veces sí a no, ¿vale? Y entonces, cuando no, viene aquí y está listo. Así que cuando llega aquí, pasa a la siguiente línea y termina, ¡así que imprime Blastoff! Y vemos que, cuando salimos del bucle, n era 0. Así que era como un valor residual de esta pequeña variable n después de la última iteración del bucle. Y eso es porque era 1 y luego le restamos 1. Y eso nos llevó a 0. Así que, una parte importante de cualquier bucle es lo que llamamos la variable de iteración, ¿de acuerdo? Y eso es algo que cambia, porque si no cambiamos nada en el bucle, se ejecutará para siempre. Eso es lo que llamamos un bucle infinito. Así que aquí tenemos n mayor que 5 y decimos que mientras n es mayor que 0, lo cual es cierto, imprima esto, vuelva a subir y vuelva a comprobarlo. ¿n es mayor que 0? ¿Sí?. Imprime esto, vuelve a comprobarlo, ¿n es mayor que 0? Imprime esto. Y aquí es cuando lees tu champú y dice hacer espuma, enjuagar y repetir. Esto es lo que piensa un informático cuando lee eso. Es como si fuera un bucle infinito. Te vas a quedar sin agua, te vas a quedar sin champú, te vas a quedar sin algo, ¿verdad? Pero el problema técnico es que n no cambia. n no cambia. Y lo que pasa es que no hay forma de que lo verdadero se convierta en falso. No hay manera, simplemente sigue siendo cierto, así que es un bucle infinito. Y eso funcionará literalmente hasta que se acabe la batería de tu ordenador o hasta que lo desconectes o encuentres algún escape o lo que sea. Si tu ordenador gira en forma de pelota de playa, tiene alguna cosita pequeña y rara, probablemente esté en un bucle infinito o casi infinito. Así que esto no es bueno porque bloquea los ordenadores. Si escribes código para hacer esto y lo ejecutas en tu ordenador, es probable que en tu ordenador aparezca algún tipo de pelota de playa girando o lo que sea, sea cual sea el sistema operativo que utilice, porque no es bueno poner el ordenador en un bucle infinito. Así que necesitamos de alguna manera tener una variable de iteración que cambie y, en la anterior, resté 1 de n. Así que esta variable finalmente pasó de ser verdadera, verdadera, verdadera, verdadera, falsa y, por lo tanto, pasó a ser falsa. Esta pregunta se convirtió en falsa, lo que nos saca del círculo. Esta variable que usamos para controlarla es lo que llamamos una variable de iteración. Porque controla durante cuánto tiempo se ejecutan las iteraciones y cuándo se detienen. Así que este es un bucle infinito porque no estamos afectando a la variable de iteración. La variable de iteración sigue siendo n. Y luego tenemos otro tipo de versión de este bucle que muestra que estos bucles son lo que se denomina bucle de viaje cero. Y ahí es cuando entra este, este empieza siendo falso. Y así lo omite. Así que esto básicamente funciona como una sentencia if. Así que está bien, entra, es falso, omite. Nunca publica ninguna de estas afirmaciones. Ahora, tenemos algunas declaraciones que podemos usar para salir de un bucle. Una de ellas es la sentencia break. Y es una sentencia ejecutable. Cuando se ejecuta, básicamente se sale del bucle y se mueve hacia la línea que está más allá del final del bucle. Así que dondequiera que nos encontremos, cuando este código se ejecuta, salta fuera del bucle. Así que vamos a tener un bucle. Este es un bucle infinito. Te acabo de decir que no hagas bucles infinitos, pero usaremos el break para salir de este bucle. Así que si bien es cierto, recuerda lo que dije, comienza siendo cierto, ¿puede llegar a ser falso? Bueno, en este caso, nunca llegará a ser falso porque siempre es cierto. Si bien es cierto, hemos construido un bucle infinito y ¿qué hace este bucle? Solicita una línea de entrada con un pequeño signo de flecha. Y luego escribimos algo como «Hola». Entra, comprobamos si la línea que escribimos era d-o-n-e. Si es así, rompemos, no es cierto, así que imprimimos la línea. Luego subimos, volvemos a preguntar, lo imprimimos. Vuelva a preguntar y esta vez, escribimos listo. Así que listo se escribe. Así que esto se hace realidad, así que lo ejecutamos aquí. Y se va inmediatamente, así que no se imprime la palabra «hecho» aquí. Imprime esa cadena para indicar que nos hemos ido. Aquí puede ser un bucle bastante largo. Esto puede ser mucho e incluso puedes decir que descansa en un par de lugares diferentes. Y, por lo general, se coloca la brecha dentro de una prueba de si. Y tan pronto como se ejecuta la pausa, el bucle termina, queda fuera del bucle. Así que puedes imaginarlo como : Aquí está el bloque, aquí está la supresión de la sangría. Así que es todo esto, esto es un bloque. El descanso se escapa de la manzana, ¿verdad? Sale de ese bloque de bucle, el bloque de código que es el bucle. Puedes considerarlo como un transportador, ¿verdad? Vas a entrar, estás haciendo un montón de cosas. Estás haciendo esto y estás haciendo esto y estás haciendo esto. Alguna otra cosa, alguna otra cosa, y como, ¡oh, pum! ¡Presiona la tecla de descanso! Vete. ¿Verdad? Sea lo que sea, por mucho código que haya en este bucle, la pausa dice que hay que salir de este bucle. Ve a la siguiente línea más allá del final del bucle. No se trata de ir a un lugar diferente del bucle. Es escapar del bucle de forma directa e instantánea. Esa es la declaración de ruptura. La otra afirmación que hace algo como esto es continuar. Entonces, continuar básicamente dice salir de la iteración actual y pasar a la siguiente. Así que se sale del bucle, pero no salta a la línea que está más allá, sino que vuelve a subir a la parte superior. Así que continúa diciendo: «Oh, vamos a subir a la cima». Break dice «sal y continúa» dice que no hagas el resto de esta iteración, sino que subas y hagas la siguiente. Así que hemos tomado exactamente este mismo fragmento de código y el único fragmento que le hemos añadido está aquí. Así que leímos una línea. Si el primer carácter es un signo de libra, continuamos. Si toda la línea está lista, la rompemos. Así que romper es lo que nos permite salir en este momento. Salgan y digamos que ya está. Y lo que hacemos es que si encontramos una línea como esta que tiene el signo de almohadilla como primer carácter, volvemos al principio del bucle. Volvemos a bajar y hacemos otra entrada. Así que no publicamos eso. Pero decimos algo aquí y por eso no se imprime la línea. Así que se salta eso. Así que es como saltar a la parte superior del bucle, no salirse del bucle. Así que interrumpe los saltos del bucle y continúa saltando hasta la parte superior del bucle. Y de nuevo, el mismo tipo de cosas, estás recorriendo este bucle, de muchas maneras. No presionas el botón de continuar. Da la casualidad de que tropiezas y ejecutas una sentencia continua y vuelves a subir al principio del bucle, lo que significa que aquí abajo no hay nada que corras. El continuar no te saca del bucle, básicamente pasa a la siguiente iteración. Abandona la iteración actual y pasa a la siguiente. Así que estos bucles completos son un poco indefinidos. Puedes construirlos hábilmente. Simplemente van y van hasta que alguna lógica o condición se vuelve falsa. Con suerte, has construido todos los bucles excepto uno. Lo construí para que eventualmente saliera del bucle o la condición pasara a ser falsa. A veces es un poco difícil verificar que estas cosas sean perfectas. A veces es un poco complicado asegurarse de que el ciclo termine. A continuación, cambiaremos de usar while a usar for y hablaremos sobre los bucles definidos.