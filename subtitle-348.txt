Hasta ahora hemos estado hablando de bucles indefinidos, y ese es el uso de la palabra clave while que se ejecuta hasta que alguna condición lógica sea falsa o se interrumpa. Los bucles definidos son finitos. Están repasando, por ejemplo, todas las líneas del archivo o todos los elementos de una lista o todos los caracteres de una cadena o algo así. Y para ello, utilizamos el constructo «para». Y es más predecible; y es incluso más fácil validarlas porque tenemos un conjunto de cosas por las que vamos a pasar, y puede que sean muchas, pero vamos a analizar todas las cosas del conjunto. Así que aquí hay un pequeño bucle, el bucle for. Así que la clave for: la for es la palabra clave. Así pues, while era la palabra clave para los bucles indefinidos, y for es la palabra clave para los bucles definidos. Así que lo primero que vemos en un bucle for es que vemos que la variable de iteración es, de forma explícita, solo una parte de la sintaxis. Es decir, puedes elegir cualquier variable que quieras. Resulta que elijo i, y todos eligen i para las variables de iteración de enteros. in es otra palabra reservada de Python. Y luego tenemos varias formas de colecciones y veremos que los archivos son colecciones, las listas son colecciones. Resulta que es una lista de cinco números enteros: 5, 4, 3, 2, 1. Y lo que hacemos en esta afirmación es decir, y de nuevo, es como si tuviera un bloque indentado. Y tienes un eliminador de muescas, así que el bloque tiene estas cosas. No sé, uno de estos días dejaré de escribir todos esos dibujos pequeños. No puedo evitarlo. Pero en cierto nivel, lo que estamos diciendo es que ejecutes este bloque cinco veces. Y quiero usar los valores sucesivos: la primera vez hasta 5, la segunda vez hasta 4, la siguiente 3, luego 2, luego 1. Así que ejecuta esto una, dos, tres, cuatro, cinco veces. Y la primera vez, es 5, imprime. La segunda vez, i es 4, imprime. La tercera vez, i es 3, imprime. 2, 1, y ya está todo listo. Blastoff. Así que lo construimos de tal manera que le hemos dado instrucciones a Python para que haga todo el trabajo. Tenemos una variable de iteración. Tenemos un conjunto de cosas por las que queremos hacer un bucle. Y solo garantiza que ejecutará esto una vez, codificará una vez, para cada una de estas cinco variables. O esa es otra forma de dibujar que sería, ya sabes, ejecutarlo una vez para 5, ejecutarlo una vez para 4, ejecutarlo una vez para 3, ejecutarlo una vez para 2 y ejecutarlo una vez para 1. 5, 4, 3, 2, 1, Blastoff. ¿Verdad? Así que eso es muy definitivo. Python se encarga de todo por nosotros. No necesitamos tener una condición lógica para detenernos ni nada parecido. Es realmente muy bonito. No tiene que ser una lista de números. Esta es una lista de cadenas. Así que lo puse en una variable. Y aquí es donde hay que tener cuidado porque lo llamé amigo y amigos, lo cual tiene mucho sentido, pero no crean ni por un momento que Python entiende lo que son los plurales. Así pues, friends es una lista de tres cadenas y friend es una variable de iteración que va a analizarla. Así que incluyo esta lista en amigos. Así que entre corchetes, lista de cadenas: Joseph, Glenn y Sally. Y luego tengo esta iteración variable «amigo» que va a repasar cada una de las cuerdas de Friends, lo que significa que ese amigo va a repetir una vez Joseph, la próxima vez va a volver a ejecutar el bucle con Glenn y la tercera vez va a ejecutar el bucle con Sally. Y así dice: «Feliz Año Nuevo: Joseph», «Feliz Año Nuevo: Glenn», «Feliz Año Nuevo, Sally». Así que ya sabéis que este código se ejecutará tres veces y un amigo se enfrentará a Joseph, Glenn y Sally en sucesivas iteraciones a lo largo del bucle. Así que puedes pensar en el enunciado for como algo complejo. Se trata de abordar el hecho de cuándo es el momento de continuar y cuando has terminado, él lo sabe. Y también lo establece en el nuevo valor. Así que es como, ¿ya terminamos? ¡No!. Muévalo al nuevo valor. Imprímelo. ¿Ya terminamos? ¡No!. Muévalo al nuevo valor y, a continuación, imprímalo. Una y otra y otra vez. ¡Oh! Ahora hemos terminado. Toda esta lógica, este bit amarillo, se construye usando la sentencia for. Puedes decirle qué hacer y simplemente escribe el código. Puedes hacer esto con un incremento i o una resta, y un bucle while, y mientras i sea mayor que cero, puedes hacer esto. Pero un bucle for simplemente lo hace por ti. Así que for hace algunas cosas por ti. Y me gusta, me gusta, creo que básicamente se trata de decir que para cada uno de los valores de 5, 4, 3, 2, 1, tengo que tomar los valores sucesivos y ejecutar ese bucle una vez. Y ese es el «de moda». Creo que the in es una palabra clave de Python bien pensada porque así es como yo la veo. Si te gustan las matemáticas, piénsalo, ya sabes, el miembro de la función, creo que ese es el miembro de. Vaya, hace tiempo que no hago teoría de conjuntos. Creo que es miembro de. Así que he aquí una cosa interesante. Puedes pensar en esto como una iteración, pero en cierto modo, en realidad es solo un contrato que dice que ejecutes este código cinco veces y yo asuma sus valores. Así que apenas sabes la diferencia entre decir i es igual a 5, print i; i es igual a 4, print i; i es igual a 3, print i; i es igual a 2, print i es igual a 1 , print i. Así que, en cierto sentido, esto es lo que sucede, es decir que el bucle for nos dice cuánto tiempo vamos a ejecutar y gestiona los valores sucesivos de i para asegurarnos de que nuestra pequeña línea de código feliz se ejecuta cinco veces con el valor correcto de i. Esa es la función de la declaración for. La declaración for se encarga de todo esto por nosotros. Así que esa es una forma de pensar en la declaración for, aunque esta es la forma más común de pensar en la afirmación for. Esta es una especie de equivalente y piensa en esas dos cosas como equivalentes. Como dije, los bucles definidos son para listas o líneas de un archivo o caracteres de una cadena y, ya sabes, se repiten entre los miembros de un conjunto. A continuación, vamos a hablar de una especie de modismos bucles, y así es como utilizamos los bucles y utilizamos los bucles para hacer cosas como encontrar el más grande o el más pequeño o comprobar si hay un valor presente o algo así. Así que eso es lo que viene a continuación.