Bienvenido al capítulo 9, Diccionarios de Python. Esta es la recompensa de las estructuras de datos. Hemos estado haciendo varias cosas. Hicimos listas y esta es una reseña. ¿Qué es una colección? Una colección es una variable en la que podemos poner más de una cosa, pero una vez que colocamos más de una cosa en una colección, tenemos que esperar para ponerla y sacarla. Tenemos que tener un índice, por así decirlo, alguna etiqueta o marcador que diga: ¿qué acabamos de poner ahí? Vamos a incluir cinco cosas, pero ¿cómo puedo recuperar la número tres? En una lista, entran y ordenan. Es bastante sencillo. De nuevo, ¿ para revisar qué no es una colección? La variable x en esta situación. Si dices x = 2, tendrá un dos, y si dices x = 4, no terminará con dos y cuatro al mismo tiempo. Pero en una colección puedes tener el valor dos y el valor cuatro, pero tienes que ponerlos en algún lugar dentro de la variable y debes tener un mecanismo de indexación dentro de la variable. Las colecciones principales de Python son una lista, de la que ya hemos hablado, y un diccionario. Una lista es como un pequeño catálogo de tarjetas que puedes hojear. Está el primero, está el segundo, y tal vez haya 40 de ellos o lo que sea. Los buscamos por posición hasta la longitud 1 porque los empezamos desde cero, como hemos mencionado. Creo que es como un antiguo catálogo de tarjetas de biblioteca y tal vez nunca hayamos visto una biblioteca, tal vez nunca hayamos visto un catálogo de tarjetas, pero es solo un montón de tarjetas que hojeas. Un diccionario permite un acceso más aleatorio, no necesariamente tienes que saber dónde está o mirarlos todos para encontrar algo, puedes etiquetarlo. Puedes decir que esto está etiquetado con verano y esto con invierno. Entonces puedes ir a decir: devuélveme el valor del verano y el del invierno. Casi se podría pensar en ello como las etiquetas de un diccionario o sus propios nombres de variables, sus nombres de variables dentro de un nombre de variable. Vamos a hablar de los diccionarios en este capítulo. Los diccionarios son la colección de datos más potente de Python y probablemente la más popular. La gente se siente atraída por lenguajes como Perl o PHP. No aprendo Perl, pero recuerdo haber visto este lenguaje, Perl, que me pareció un lenguaje de programación terrible, pero tenía algo llamado matrices asociativas, que eran pares clave-valor, al igual que los diccionarios de Python. La gente toleraría lo que yo pensaba que era un lenguaje de programación terrible porque podían usar esta estructura de datos de valores clave. Es como tener una base de datos para estructuras de datos de tamaño moderado en Python. Como he dicho, Perl y PHP tienen una matriz asociativa que son pares clave-valor , bolsas de propiedades o mapas hash o mapas en el lenguaje de programación Java. Bolsa de propiedad en C-Sharp y.NET. Esta noción de un par clave-valor es realmente, hoy en día, necesaria en cualquier lenguaje de programación razonable. Los diccionarios han cambiado con el tiempo en Python. De hecho, hay otro curso, programación en C para todos, en el que analizamos esto con mucho más detalle. Lo que ocurrió en Python con el tiempo fue que la estructura interna de lo que eran los diccionarios y la forma en que se construye el código del diccionario dentro de Python cambió y evolucionó. Antes de Python 3.7, los diccionarios no mantenían las entradas en orden de inserción. Es posible que veas cursos que hablan mucho, incluidas mis versiones anteriores de mi curso que decían que los diccionarios ordenan todo de forma aleatoria. Esto se debe a que se crearon con hashmaps. Los Hashmaps son una estructura de datos informáticos subyacente, no te preocupes por eso. Pero más adelante, en Python 3.7, que salió en 2018, las entradas están en orden de inserción, pero eso no significa que estén ordenadas. Si pones las cosas en una lista, están en el orden en que las pones. Si pones las cosas en un diccionario, están en el orden en que las pusiste. Casi podrías pensar en un diccionario como una lista con una búsqueda extra rápida por clave. Puedes considerarlo como una lista, pero con acceso aleatorio. No tienes que revisarlos todos. Si sabes cuál es la clave, puedes buscarla. Es posible que veas cosas diferentes si estás viendo documentación o libros de diferentes versiones de Python. Las listas, los diccionarios y las tuplas de Python son cosas que se diseñaron pensando en ti : están diseñadas para que sean fáciles de usar. Si realmente quieres profundizar, puedes hacerlo, pero la forma en que se construyeron realmente es una ciencia informática muy intrincada. Aprender eso es algo útil, pero por ahora solo vamos a usarlos y estaremos agradecidos de que Guido van Rossum los haya construido para nosotros y puedes insertar algo, puedes sacar algo y puedes tirarlo a la basura y no tienes que preocuparte por lo que realmente está sucediendo. Pero eso en sí mismo es un estudio muy interesante que trataremos en otro curso. Echemos un vistazo a las listas. Creas una lista vacía. Agrega un número a la lista, agrega otro número a la lista y, a continuación, agrega otra lista numerada, 12, 3, 75. Entran, tienes tres de ellos. Puedes buscarlos por la tarjeta numérica [1] que es tres, que es la segunda, porque comienzan en cero , y puedes reemplazarla. carta [1] = carta [1] + 2, y eso toma ese valor, tres, y lo convierte en cinco. Una vez más, hay tres cosas aquí y tenemos que tener un mecanismo de indexación, y ese mecanismo de indexación consiste en números enteros que comienzan desde cero hasta la longitud de la lista, -1. Los diccionarios, haciendo lo mismo básico, creo que soy como un archivador, es crear un diccionario. Literalmente puedes usar 0 , 1 y 2 como teclas. Podrías. Sin embargo, no van a mantenerse en orden. Habrá un orden de inserción, pero si pones 0, 2, 1, el orden será 0, 2, 1 porque es una clave, no la posición. Si quieres una posición, usas listas. Es más fácil pensar en ellas como etiquetas, que en este caso son cadenas. Gabinete ['resumen'] = 12, gabinete ['otoño'] = 3 y gabinete ['primavera'] = 75. Eso significa que colocamos tres valores usando tres teclas. Nosotros, como programadores, podemos elegir esas teclas. No tienen que ser cadenas, pero las cadenas son probablemente lo más fácil en lo que pensar. Si lo imprimimos, no solo vemos el 12, el 3 y el 75, sino que vemos que el 12 está guardado debajo de la llave, el verano, el tres se almacena en la tecla, el otoño, el 75 se almacena debajo de la llave, la cadena. Luego podemos buscarlas por clave. Cabinet ['fall'] es tres. Podemos ponerlo a la izquierda y a la derecha de una declaración de asignación. Cabinet ['fall'] = cabinet ['fall'] + 2, y ahora cambiamos ese valor. De nuevo, si utilizas cadenas como claves, casi puedes pensar en ellas como variables dentro de una variable. Tenemos una colección, el diccionario, y en esa colección tienes un montón de variables. Puedes imaginar que Python, cuando comienzas a crear variables, usa una forma similar para realizar un seguimiento de lo que hay en cada variable. Probablemente sí. Una vez más, al comparar listas y diccionarios, son muy similares. La diferencia es que la indexación, la forma en que se busca algo, como en la lista [0], se basa en el primer elemento y podemos reemplazarlo. Podemos colocarlos en el lado izquierdo o derecho de una declaración de asignación. Lo que está entre corchetes es lo único que cambia. Las listas ponen números entre corchetes, los diccionarios cualquier cosa, pero las cadenas son muy comunes, entre corchetes. En realidad, es la forma en que los guardas y también el almacenamiento , porque eres como que la lista existe y quieres añadir una al final. El diccionario, solo los agregas a pesar de que se mantienen en orden. Lo que hay que pensar en ellos son los pares clave-valor. Si miramos este código, colocamos dos cosas en la lista, agregamos 21 y agregamos 183, y luego podemos reemplazarlo. Luego, comparando esa misma línea por línea en el diccionario, colocamos 21 años y un curso de 182 , lo imprimimos y puede ver los pares clave-valor. Luego puede reemplazar una de las teclas, la S23, e imprimirla y simplemente cambiará. Lo reemplazaste y cambia. Además de construir un diccionario y luego agregarle cosas, podemos tener una constante. Podemos tener constantes de lista con corchetes y usar corchetes para hacer constantes de diccionario. En esa constante, solo tienes clave: valor, clave: valor, clave: valor, y simplemente rellénala. Puedes crear un diccionario vacío llamando al constructor del diccionario y, como en la diapositiva anterior, dictar, abrir impresión, cerrar impresión o simplemente puedes crear un corchete constante. Piense en esto como cero o 42, o «gratis». Es un literal de diccionario o una constante de diccionario.