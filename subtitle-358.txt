Una de las aplicaciones de los diccionarios de las que hemos estado hablando durante todo este curso es la noción de un histograma, en el que tienes un montón de cosas y quieres revisarlas todas y luego quieres crear recuentos. En este caso, vamos a hablar del nombre más común. Estos son algunos de los nombres de los datos de correo electrónico que utilizamos en este curso una y otra vez, de la lista de correo electrónico que era de 2004 y del proyecto de código abierto que dirigí llamado sky, y son personas reales. Sigo siendo amigo de todas estas personas y las conozco a todas. Pero el problema es que te va a gustar cuando hagamos lo máximo y lo mínimo, podrías mirarlos y darte cuenta, vale, parece que Marquard tiene tres años y luego Zhen uno, dos. Como humanos, miramos esto desde nuestros ojos y solo estamos viendo cosas diferentes. Creo que Zhen tiene cinco años y yo tres. Parece que Cwen tiene dos años. Ahora bien, el problema es, y lo vimos en la palabra más común, que somos terribles como humanos. Somos bastante buenos en hacer la mayoría de las cosas bien, pero vamos a cometer pequeños errores. Una de las cosas que hay que hacer es empezar un poco, haciendo algunas marcas. Aquí está Csev. La primera vez que lo veas, cuéntalo, 1, 2, 3. En lugar de solo mirarlo a tu alrededor, lo revisas secuencialmente uno a la vez y luego empiezas a ver un nombre nuevo, haces una pequeña marca de verificación, y luego ves el nombre en otra ocasión, agregas una marca de verificación a ese nombre. Terminas con este diccionario. Es como un diccionario en el que la cuenta, los tres, en este caso los siete, y los cinco, y los tres, están en un diccionario, y la clave de ese diccionario es Csev, Zqian, Cwen y Stephen Marquard. Esa es la idea. De esta manera, no podemos simplemente mirar lo que tenemos, tenemos 10 o 12 aquí. Puedes hacer un millón y aún puedes hacer un histograma de un millón de cosas y averiguar el recuento de todas las cosas diferentes que vas a ver. Puede implementar esto y tratar la clave de su diccionario como ese nombre. Ahora tienes que iniciar tu contador la primera vez que hagas Csev y Cwen, así que ponlo en uno y luego podrás verlo, pero luego podemos añadirle uno cuando veamos a otro Cwen, vamos a añadir uno, y luego ella será dos y luego yo seré uno. Luego, la idea de que podemos tener tantos contadores como queramos. Tenemos un fragmento de código que agrega un nuevo contador con instrucciones de asignación, ccc_csev = 1, y luego lo agregamos cuando vemos el siguiente. Hay un poco más, pero puedes ver la idea de ver un nombre nuevo y añadir uno al recuento actual de ese nombre. Una de las cosas de los diccionarios es que no puedes simplemente hacer referencia a una clave de diccionario que no existe porque Python quiere hacerte estallar. No da tanto miedo como antes ver un rastreo. Entendemos que el rastreo es solo una forma de comunicación entre usted y Python. Por eso las hice rosas, porque no son malas ni dan miedo. Son solo comunicación. En este caso particular, estamos imprimiendo ccc_csev. Es un diccionario completamente nuevo porque acabamos de crearlo una sentencia antes, y dice que no puedes hacerlo y que recibes un rastreo y tu código tiene un aspecto asqueroso. La buena noticia es que puedes preguntar con el operador in, y hemos usado in in para bucles. Pero este es un operador lógico que va a decir: ¿está csev en el diccionario? ¿Es csev una de las claves del diccionario ccc? En este caso, porque acabamos de empezar, es falso. Ahora lo que podemos hacer es comprobar sin error si hay algo ahí o no, y luego podemos escribir un «si» y, de lo contrario, podemos escribir un «si». Ahora lo que ves, como ves estamos haciendo un diccionario. Vamos a tener algunos nombres. Normalmente leeríamos esto de un archivo, pero lo mantengo simple y tenemos a Csev, Cwen, Csev, Zqian y Cwen de nuevo. Y vamos a escribir un bucle que abarque todas esas cosas, y primero comprobaremos si el nombre que estamos viendo no está en los recuentos. Si esa clave aún no está presente en los recuentos, diremos count_name = 1. Es la primera vez que lo vemos. Es como añadir un nombre nuevo y poner una sola marca de verificación. De lo contrario, si ya está ahí, podemos decir count_name = count_name + 1 y sabemos que no vamos a obtener un rastreo porque está ahí, y luego lo almacenamos de nuevo en un count_name. Ahora tenemos este bucle. En este caso, solo lo ejecutaremos cinco veces e imprimirá que vemos a Csev dos veces, a Cwen dos veces y a Zqian una vez. Pero esto también podría repetirse un millón de veces. Esta es una forma genérica de usar un diccionario para capturar el momento en que encontramos un nombre por primera vez y luego capturar el momento en el que le agregamos uno, nos encontramos en el segundo, tercero, cuarto, lo que sea. Cuando terminemos, el diccionario es un histograma de los recuentos de las personas. Ahora, esta noción de esto si es así. Si está dentro, haz una cosa. Si no lo es, haz otra cosa. Es tan común. Lo que hemos incorporado a los diccionarios, afortunadamente, es un método. Algún día hablaremos de programación orientada a objetos. Es un método llamado get. Cada diccionario tiene este método get y toma dos parámetros. Una es la clave que está buscando y la segunda es lo que llamamos el valor predeterminado si la clave no está presente. x va a ser cero o lo que sea que esté el valor anterior debajo del nombre de la clave. Esto no va a obtener un rastreo, y se colapsa un poco si no, de cuatro líneas de código a una línea de código. Esto es lo que llamaríamos un modismo. Es un patrón que utilizamos una y otra vez porque simplemente no queremos que nuestro código sea más grande por ser más grande, ya que cuatro líneas tienen cuatro veces más probabilidades de tener un error que una línea. No siempre es cierto. A veces, una línea es tan fea que es difícil de entender. Pero en este caso, todos los programadores de Python sabemos qué es obtener. Lo usamos todo el tiempo. Ahora podemos reescribirlo para loop. Repasaremos de nuevo los cinco nombres y diremos count_name = counts.get name, 0. Eso significa que si no está ahí, esa parte de la expresión del lado derecho será cero y luego le agregaremos uno. Esto resuelve tanto el caso de la primera vez que vemos un nombre como el de las veces posteriores en que lo vemos, y lo toma un par de diapositivas antes y lo convierte en una sola línea. De nuevo, échale un vistazo, vuelve a esas diapositivas, apréndelo y, entonces, coge una cosa y la usa. Quiero decir, ya nadie que conozca Python escribe eso si es así, a menos que tengas que usar otra lógica. Todo el mundo sabe cómo funciona get porque los histogramas son un caso de uso muy común. Contar es algo hermoso. Terminaré este segmento para hablar sobre Sesame Street. Hay una pequeña canción maravillosa que puedes encontrar en Internet buscando «El conteo de cuerdas es maravilloso según el conde» en Barrio Sésamo. No puedo darte la URL porque cada vez que alguien la pone, le dicen que la quite, pero luego alguien más la sube. Tarde o temprano, podrás escuchar al conde cantar. Contar es maravilloso. Probablemente no debería cantar, pero entiendes la idea. Al conde le importan los números y le gusta contar cosas. Python se preocupa por los números, y a Python también le gusta contar cosas. Aplausos.