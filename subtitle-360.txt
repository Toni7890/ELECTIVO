Bienvenido al capítulo 8. Así que en el capítulo 8, vamos a tomar las cosas en una dirección un poco diferente. Hasta ahora, lo hemos estado haciendo, hemos estado hablando y creando código para entender lo que en informática llamamos algoritmos. Los algoritmos son los caminos que llamamos escribir código para recorrer ciertos caminos. Vamos aquí y vamos allá. Volvemos a subir y venimos por aquí. Comprobamos si es esto. Hacemos esto y lo otro. Los algoritmos son como el enrutamiento GPS para el código. Las estructuras de datos son variables estructuradas y hasta ahora hemos estado usando variables muy, muy simples. Hemos estado usando variables que son como x igual o y igual o lo que sea. Pero hay formas más complejas de usar la memoria, usar las variables. Hay, hay variables de colección, por lo que esta es la primera vez que vamos a empezar a hablar de formas de usar las variables de manera diferente. Y el diseño de sus variables, el diseño de sus estructuras de datos y la forma en que organiza los datos mientras se ejecuta el programa, pueden ayudarlo a resolver su problema. Por lo tanto, tiene un conjunto de pasos y tiene una forma interna de datos. Y las listas, los diccionarios y las tuplas son las tres primeras estructuras de datos de las que realmente vamos a hablar. Se trata de colecciones, en las que tenemos más de un valor en una variable y, por lo tanto, antes de hablar demasiado sobre las colecciones, hablemos de lo que no es una colección. Así que en este pequeño ejemplo, x = 2, se encuentra un fragmento de memoria. Python lo etiqueta con una «x» y le pone un 2. Luego, más adelante dice x = 4. Encuentra esa misma pieza de memoria, sobrescribe el 2 con un 4. Y así, cuando todo está dicho y hecho, lo que tenemos es un 4. Ahora, una lista es una colección, lo que significa que en una sola variable podemos tener más de una cosa. Y en esto, de hecho, hemos estado usando listas todo el tiempo. Cuando vemos la sintaxis entre corchetes, la hemos estado usando para sentencias, etc., etc., etc. Esta es una lista. Los corchetes son una constante de lista. Pero lo que notarás aquí es que puedo poner tres cosas, tres cadenas diferentes, Joseph, Glenn y Sally, en una sola variable colocándolas entre corchetes. Por lo tanto, sigue siendo una sola variable. friends ya no es una cadena. Es una lista de cadenas, que es diferente a una cadena. Y lo mismo para el equipaje de mano: calcetines, camisa y perfume. Así que puedes pensar en ello como una pieza de equipaje con un nombre, x o y. Pero luego puedes poner varias cosas en ella. Y lo interesante de estas estructuras de datos que utilizaremos para diferentes propósitos es la forma en que las colocas y, luego, cómo las recuperas. Serán las distinciones entre estos tres tipos diferentes de colecciones de las que hablaremos. Como dije, las constantes de la lista son cualquier cosa entre corchetes. Así que esa es una lista de tres números enteros: 1, 24 y 76. Esta es una lista de tres cadenas: roja, amarilla y azul. Verás, puede ser de cualquier tipo. Solo usamos comas y corchetes para iniciarlos y detenerlos. No es necesario tener el mismo tipo de datos en una lista. Esta es una lista que tiene una cadena con rojo, un entero de 24 y, a continuación, 98,6, que es un número de punto flotante. Y ni siquiera tiene que ser así, no lo haremos demasiado durante un tiempo, pero esta es una lista de tres elementos. El primer elemento de la lista es un entero. El segundo elemento de la lista es otra lista. Son listas dentro de listas, son tortugas desde sus inicios. Por lo tanto, puede tener listas que incluyan listas. Y cuando hablamos de estructuras de datos de una manera más avanzada, tener una lista que incluya otra lista o un diccionario que incluya listas es solo una parte del diseño. Ahora, es demasiado prematuro hablar de por qué harías esto, pero es posible. Así que esto es un 1, una lista y un 7. Así que, en realidad, hay tres elementos en esta lista en particular. ¿Está bien? Y puedes tener una lista vacía. Por lo tanto, las constantes de la lista son estos corchetes. Como dije, ya hemos estado usando listas. Tenemos cuatro bucles e iteramos la i pasando por 5, 4, 3, 2 y 1 para imprimir estas cinco cosas, lo que significa que for ejecutará esto una vez para cada valor de la lista e i tomará los valores sucesivos de la lista. Y como he dicho, ya lo hemos estado haciendo. ¿Verdad? Sabes, lo hemos estado haciendo desde el capítulo 4, o el capítulo 5, o algo así. Así que las listas y los bucles definidos, el tipo de cosas que hemos estado haciendo desde el principio, son mejores amigos. La entrada. Así que puedes pensar en una lista como un conjunto. Es un conjunto de tres cuerdas y es como para todos los miembros de este conjunto. Así que «para amigos entre amigos» y recuerda, el hecho de que use el plural aquí y el singular aquí no significa nada para Python. Significa algo para ti mientras lees el código. Es una variable mnemotécnica. Puede ser lo que quieras. De hecho, es exactamente el mismo código. z es igual a Joseph, bla, bla, bla, y para x en z, x adquiere un valor sucesivo. Python considera que estas dos cosas son completamente equivalentes. Pero tú, como ser humano, las lees como algo diferente. Y esa es la elección de, recordándonos la elección de los nombres de las variables. Así que en estas colecciones, hay que poner cosas en la colección y poner varias cosas en la colección, pero también hay que sacarlas. Por eso, usamos el operador index, el mismo operador que usamos para buscar dentro de las cadenas, para buscar dentro de las listas. Así que leí esto en mi mente como suplente. Así que esto es Friends Sub 1. Ahora recuerda que estos, usando la técnica del esquema de ascensores en Europa, el primero es 0, el segundo es 1. Así que Friends sub 1 es en realidad el segundo elemento de la lista y así es como Glenn acaba publicándose aquí. Así que puedes mirar dentro de las listas. Podemos cambiar las listas y la palabra que se usa en Python se llama mutable, que significa cambiable. Se puede cambiar. Así que te darás cuenta de que algunas cosas no son mutables. Son como cuerdas. Así que añadimos plátano a la fruta. Parece que cambiaría la primera letra a minúscula b. Tenemos un valor inferior a 0, una fruta con un valor inferior a 0 es igual a b. Y a menos que hayas visto este rastreo, ya sabes, podrías pensar: ah, no hay problema. Sintácticamente, Python podría admitirlo, pero no es así porque no se nos permite cambiar esta cadena. Y esa es en parte la razón por la que cuando hacemos cosas como poner puntos más bajos en las cadenas, siempre decimos que hace una copia de la cadena y nos devuelve una copia en minúscula sin cambiar la cadena original. Y eso es porque las cadenas no son mutables. La asignación de elementos es otra palabra que Python usa para hablar de esto. Asignación de elementos, por lo que las cadenas no son mutables. Vale, pero por otro lado, si tenemos una lista, 2, 14, 26, cinco números enteros, la imprimimos y luego decimos que lotto sub 2 es igual a 28. Bueno, eso es lo que pone a 28 en esa posición. Y en este punto la lista ha cambiado de verdad, ¿verdad? Así que lo imprimimos. Los 26 originales desaparecieron hace mucho tiempo. Es igual que cualquier declaración de asignación, excepto que podemos asignarla a una parte de la lista. Podemos incluir algo en una parte de la lista. Las listas tienen longitud, al igual que las cadenas. Usamos exactamente la misma función. Python sabe el tipo de parámetro y la longitud del objeto que estamos viendo. Y dice: oh, sé lo que es. En este caso, es una cadena y tiene nueve caracteres. Y si decimos, oh, aquí está esta lista y esta es otra lista en la que no todos los tipos son iguales, es uno, dos, tres, cuatro. ¿Cuántas cosas hay ahí? Hábleme de eso. Hay cuatro cosas ahí. Así que len es que puedes pasar varias secuencias y las usaremos también para diccionarios y tuplas cuando lleguemos a ese punto. La función de rango es una función especial algo extraña que usamos principalmente cuando construimos bucles, pero la función de rango devuelve una lista, devuelve una lista. Por lo tanto, devuelve una lista de 0 hasta, pero sin incluir. ¿ Te suena familiar? 0 pero hasta el número, pero sin incluirlo. Así que el rango 4 nos da cuatro números. Pero comienzan de 0 a 3. Y la razón de esto es que pueden corresponder a la posición del índice en listas o cadenas porque los ceros, ya sabes, una lista de tres elementos es 0, 1, 2, hasta 3, pero sin incluirlo. Por lo tanto, si tenemos una lista de tres elementos aquí y decimos cuántas cosas hay allí, son 3. Y si decimos imprimir el rango de amigos de Len, entonces este Len Friends es 3. Por lo tanto, este rango es de 0 a 2. Por lo tanto, podemos usarlos para construir listas si queremos tener una variable contada. Así que la mejor manera de, más o menos, revisar una lista es esta de aquí. Es un bucle determinante simple y agradable que básicamente tiene una variable de interacción y está muy claro si lo único que queremos hacer es imprimirlos. Pero, ¿qué pasa si de alguna manera queremos saber dónde están en relación con la lista? Queremos algo en variable. Podrías decir que i es igual a 0, usar un bucle while, i es igual a más 1. Puedes hacer todo eso. Hemos visto eso, esos bucles en cosas anteriores. O puedes usar un bucle. Pero en lugar de hacer que la variable de iteración pase por los elementos reales de la lista, hacemos que la variable de iteración pase por los números del 0 al 3 y eso es lo que es. Así que el rango aquí es 0, 1, 2. Y entonces voy a pasar por 0, 1 y 2. Y luego, cuando queremos ver un elemento en particular de la lista, solo usamos el operador de índice sub 0, sub 1, sub 2. Así que estas dos listas producen exactamente el mismo resultado, pero en esta sabemos que, durante cada iteración del ciclo, sabemos qué es i. Y puede haber razones por las que quieras saberlo. Puede que quieras imprimir : Oh, encontré algo en la tercera posición. Lo cual no podrás ver aquí a menos que agregues como i = 0, i = i + 1. Así que esta es una forma de crear lo que llamamos un bucle contado. Entonces, en lugar de ser una especie de bucle que simplemente atraviesa un conjunto, se cuenta como un bucle, porque pasa por un rango de números. Está bien. A continuación, continuaremos hablando de algunas de las cosas que puedes hacer con las listas.