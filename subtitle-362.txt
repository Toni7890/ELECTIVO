Ahora vamos a hablar sobre cómo funcionan juntas las cadenas y las listas, y esta es una de las cosas más comunes que vamos a hacer. Vamos a leer algunos datos, los vamos a partir en pedazos y vamos a buscar pequeños fragmentos de fragmentos. Y este es uno de los métodos favoritos de la gente en cadenas, y es el método de división. Así que vamos a encontrar una forma de dividir una cadena. Y lo más simple que vamos a hacer es encontrar los espacios y dividirlos en partes. Y hay una función incorporada en Python llamada split. Así que es miembro de abc, entonces abc.split, y esto devuelve una lista. Así que básicamente toma una cadena y nos devuelve una lista. Y la lista tiene tres palabras. Los espacios han desaparecido, están cortados y los tenemos. Ahora, cuando terminamos, vemos que en esa cadena en particular había tres palabras y podemos extraer la primera palabra imprimiendo cosas por debajo de 0. Así que esto es algo muy práctico. A veces queremos la segunda o la tercera palabra o, quién sabe, tal vez queramos escribir un bucle que recorra todas las palabras. Es muy, muy, muy fácil de hacer. Así que ahora tenemos cosas y ahora tenemos un tres, vamos a recorrerlas y luego tenemos una variable de iteración w que repasa las tres palabras de la lista. Así que el código para hacer que esto funcione es: aquí está mi cadena, divídala y, a continuación, escriba un bucle for simple que lo recorra horizontalmente y analice cada una de las tres palabras que contiene. Así que solo se necesitaron tres líneas de código para hacerlo. Así que este bucle se ejecuta tres veces y cada vez contiene tres palabras. Y este patrón, cuando estés perdido en una tarea futura, regresa y mira esta diapositiva. porque este es el patrón de cómo leemos una línea, la dividimos en partes y luego vemos que cada palabra de la línea es una división y luego un bucle. Está bien. Un par de detalles sutiles sobre la división es que se divide por defecto en espacios en blanco y trata más de un espacio como un solo espacio. Así que, aunque aquí hay espacios adicionales, cuando dividimos esta línea nos quedan cuatro cosas, muchos espacios. Las palabras que esperarías sacar de eso. Así que es un poco inteligente, un espacio extra no se divide de forma extraña. Lo segundo de la división es que no tiene que funcionar con espacios. Entonces, si obtienes datos como estos, tal vez de un sistema de inicio de sesión o de tu sistema de contabilidad o algo así, y tienen algún delimitador extraño, puedes decirle a split que use un delimitador diferente. Si lo hacemos de esta manera, está buscando espacios y no encuentra ninguno. Así que obtenemos una lista de las palabras definidas por espacios. Y no se da cuenta de que queremos que se divida en estos puntos y comas en primer lugar. Y acabamos de obtener una lista y esa lista tenía una cadena y eso es lo que pasa si no hay espacios en la cadena. Por otro lado, puedes diferenciar una división en función de un carácter diferente que no sea un espacio en blanco. Así que cuando le dices que se divida en un carácter diferente, no hace la sofisticada tarea de comprimir varios espacios. Ya no se divide en espacios, solo se divide en lo que le dijiste que dividiera. Así que mira, corta, mira, mira, mira. Así que lo que obtenemos es una lista primero, segundo y tercero. Y de nuevo, aquí es cuando necesitas hacer esto porque tienes algunos datos que son realmente extraños. Y veremos situaciones en las que usaremos la división. En vez de buscar un personaje y encontrar y encontrar otro, usamos dividir y luego coger cosas. Bien, este es un ejemplo de cómo usaríamos la división para analizar los datos del correo, y vamos a analizar mucho los datos del correo. Así que, aquí vamos. De nuevo, te vas a acostumbrar a estas líneas. Abre el archivo. Recorra el archivo. Quita el espacio en blanco del lado derecho de la cosa. Comprueba si empieza por Desde. Desde el espacio, en este caso. Si no es así, continúa. Así que este es el código de omisión. Sáltate las líneas que no nos interesan. Y luego lo dividiremos. Y lo que nos interesa de esta cosa en particular es que estas son las líneas de From. Solo vamos a leer las líneas From porque hay mucho más en este corto de mbox. Estamos viendo en qué día de la semana ocurrió esto. Y así puedes ver estas líneas. Siempre tienen espacios, así que lo cortamos basándonos en los espacios, troceamos, troceamos. Y siempre serán lo mismo, así que serán la palabra 0, la palabra 1 y la palabra 2. Así que la palabra sub 2 siempre será el día de la semana. Así que esto va a saltarse las líneas, saltarse las líneas que no tienen De. Tan pronto como veamos From, lo dividimos y sacamos la segunda palabra. Y este es un código muy simple. La división nos hace la vida mucho más fácil. No tenemos que buscar un espacio, no tenemos que buscar otro espacio. Si lo haces con solo buscar, tendrás que hacer algo como buscar el primer espacio y, luego, en otra línea de código, buscar el segundo espacio. Y luego buscarías el tercer espacio y luego usarías el corte de cadenas para extraerlo. Qué asco. Divídelo, ve a buscar la tercera palabra y listo. Ahora lo que vamos a hacer es mostrarles un patrón que yo llamo doble división. Y es que divides algo y luego lo vuelves a dividir. Y vamos a volver al problema que estábamos resolviendo antes. Y es que queremos sacar esta información, ¿no? Y la última vez que lo hicimos, hicimos un hallazgo. Y luego encontramos el espacio, y luego usamos el corte de cuerdas. Y aún así funcionaría. Esa no es una mala forma de hacerlo, pero veamos cómo podríamos hacerlo dividiéndonos. Así que lo primero que vamos a hacer es dividir esto en una división basada en los espacios, usando la división normal. Así que ahora tenemos las palabras 0, 1, 2, 3, 4, 5 y 6. Y ahora vamos a sacar las palabras sub1, ¿vale? Así que ese no es el nombre del anfitrión, es la dirección de correo electrónico, ¿vale? Así que muestra la dirección de correo electrónico en dos líneas muy elegantes. Y si optas por la estrategia de búsqueda, teníamos que usar variables, teníamos que recordar lo que significan las variables, tienes que hacer un pequeño dibujo. Es difícil. Ahora es como: oh, es lo segundo, simplemente agárralo. Es lo segundo. Y eso es lo que sería. Entonces, lo que vamos a hacer es hacer una doble división. Vamos a hacer una segunda división. Vamos a poner esta variable words sub 1, que es esta de aquí, en la variable correo electrónico y ahora vamos a dividir esto, esto de aquí, basándonos en el signo at, porque sabemos que el correo electrónico consta de dos partes. Una está antes del signo de arroba, la segunda está después del signo de arroba. Y ahora lo que obtenemos es una lista. Así que ves que lo divide en función del signo de arroba. Tenemos la segunda, así que esta es la pieza 0 y esta es la pieza 1. Suelo usar la palabra «piezas» en esto todo el tiempo. Si ves mi código, uso partes porque cuando lo divido, se divide en partes. Y por eso nombro mis piezas variables. Y ahora, divido las piezas por debajo de 1. No son palabras sub 1, sino piezas sub 1. Así que las palabras eran cada una de estas palabras y las piezas eran las piezas después de dividirlas en partes. Y las piezas inferiores a 1 son la segunda parte de las piezas que surgieron después de dividirlas con un signo de at. Así que miras esto, lo comparas con lo que hacíamos antes y entiendo lo que es, y podría escribir ese código rápidamente. Y es predecible, y no tengo que recordar cuáles son esas variables. No tengo que hacerme ningún dibujo, simplemente digo: corta, corta. Este es el 1. Chuleta. Este es el número uno de ese pequeño segundo trozo de piezas. Así que eso nos da una especie de buen comienzo con las listas, nuestra primera estructura de datos real. El concepto de colección y el de poner varias cosas en una variable. Estas colecciones tienen mecanismos de organización internos. Las listas se organizan secuencialmente con el operador de corchetes como operador de búsqueda. Luego hicimos algunas operaciones en cadenas, en las listas las ordenamos y usamos la opción de dividir. Por eso, en los próximos dos capítulos, refinaremos todas estas técnicas y les añadiremos nuevas técnicas.